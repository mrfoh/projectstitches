//get product
			$product = $this->products->skipPresenter()->find($id);
			//validation
			$validation = Validator::make($request->all(), [
				'image' => "required"
			]);

			if($validation->fails()) {
				$messages = $validation->messages();
				//return response
				return response()->json($messages, 422);
			}

			$image = $request->input('image');

			//allowed file types
			$allowed = array('image/jpeg','image/jpg','image/png');
			//file size
			$size = (strlen($image) * 0.75) - substr_count(substr($image, -2), '=');
			$size = $size * 0.001;
			//decode base64 string
			$decodedImage = base64_decode($image);
			//open file buffer
			$f = finfo_open();
			//get mime type
			$mime_type = finfo_buffer($f, $decodedImage , FILEINFO_MIME_TYPE);
			//validate file type
			if(!in_array($mime_type, $allowed)) {
				//return response
				return Response::json(array('message' => "Unsupported file format"), 422);
			}
			//validate file size
			if($size > 4024) {
				//return response
				return response()->json(array('message' => "File exceedes max file size(1MB)"), 422);
			}
			//make image
			$upload = Image::make($image);
			//file name
			$ext = $this->getFileExtension($mime_type);
			$name = time().md5(rand(0, 999));
			$name = 'content/'.md5($name).".".$ext;
			//save image
			$upload->save($name);
			//user
			$user = $this->requestUser();
			//attributes
			$attrs = [
				"user_id" => $user->id,
				"path" => $name,
				"mime" => $mime_type,
				"size"=> $size
			];

			$img = $images->skipPresenter()->create($attrs);
			$product->images()->save($img);

			return $images->skipPresenter(false)->find($img->id);